import os
import time
import json
from openai import OpenAI
from keys import OPENAI_API_KEY_TEAM
from image_utils import load_category_examples_from_csv

OPENAI_MODEL = "gpt-4o"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", OPENAI_API_KEY_TEAM)

client = OpenAI(
    base_url="https://llm.chotot.org",
    api_key=OPENAI_API_KEY
)

def strip_code_block(text: str) -> str:
    if text.startswith("```json") or text.startswith("```"):
        return text.strip("`").split("\n", 1)[1].rsplit("\n", 1)[0]
    return text

def build_messages(base64_images: list[str]) -> list:
    return [
        {
            "role": "system",
            "content": (
                "B·∫°n l√† chuy√™n gia ƒë√°nh gi√° gi√° tr·ªã v·∫≠t d·ª•ng d·ª±a tr√™n h√¨nh ·∫£nh.\n"
                "Nhi·ªám v·ª• c·ªßa b·∫°n:\n"
                "- **Ch·ªâ ph√¢n t√≠ch m·ªôt v·∫≠t th·ªÉ duy nh·∫•t.**\n"
                "- N·∫øu h√¨nh ·∫£nh bao g·ªìm **nhi·ªÅu v·∫≠t th·ªÉ kh√°c nhau**, h√£y tr·∫£ v·ªÅ c·∫£nh b√°o y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ª•p l·∫°i h√¨nh r√µ r√†ng, m·ªói v·∫≠t th·ªÉ ch·ª•p ri√™ng.\n"
                "- N·∫øu nh·∫≠n di·ªán ƒë∆∞·ª£c d√≤ng s·∫£n ph·∫©m c·ª• th·ªÉ (v√≠ d·ª•: iPhone 7 Plus, Galaxy S10), h√£y ghi r√µ ƒë·∫ßy ƒë·ªß t√™n model v√†o tr∆∞·ªùng \"name\".\n"
                "V·ªõi v·∫≠t th·ªÉ ƒë√≥, h√£y cung c·∫•p c√°c th√¥ng tin sau:\n"
                "1. T√™n v·∫≠t th·ªÉ (name)\n"
                "2. M√¥ t·∫£ v·∫≠t th·ªÉ ng·∫Øn g·ªçn (description)\n"
                "3. M·ª©c ƒë·ªô c√≤n m·ªõi 0-100% (percent_new)\n"
                "4. M√¥ t·∫£ c√°c h∆∞ h·ªèng n·∫øu c√≥ (damages)\n"
                "5. T·ª∑ l·ªá h∆∞ h·ªèng 0-100% (damages_percent)\n"
                "6. Gi√° trung b√¨nh t·∫°i Vi·ªát Nam (price_low - price_high)\n"
                "7. Danh m·ª•c ph√π h·ª£p (category) theo ƒë√∫ng c·∫•u tr√∫c sau:\n"
                "   category: {\n"
                "       \"level_1\": \"\",\n"
                "       \"level_2\": \"\",\n"
                "       \"level_3\": \"\",\n"
                "       \"level_4\": \"\",\n"
                "       \"level_5\": \"\"\n"
                "   }\n"
                "8. Cho bi·∫øt nh·ªØng ·∫£nh n√†o thu·ªôc v·∫≠t th·ªÉ ƒë√≥ (image_indexes: [0, 1, 2]...)\n"
                "9. Li·ªát k√™ c√°c t√¨nh tr·∫°ng c·ª• th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn gi√° tr·ªã (issues: [\"tr·∫ßy\", \"m√≥p\"]...)\n"
                "Ch·ªâ ch·ªçn t·ª´ c√°c danh m·ª•c c√≥ trong danh s√°ch sau:\n"
                f"{category_examples}\n"
                "N·∫øu c√≥ h√¨nh ·∫£nh **qu√° m·ªù ho·∫∑c kh√¥ng r√µ v·∫≠t th·ªÉ**, h√£y l√†m nh∆∞ sau:\n"
                "- Kh√¥ng c·ªë ƒëo√°n n·∫øu kh√¥ng ch·∫Øc ch·∫Øn.\n"
                "- Tr·∫£ v·ªÅ \"name\": \"Kh√¥ng r√µ\", \"description\": \"Kh√¥ng th·ªÉ nh·∫≠n di·ªán do ·∫£nh m·ªù\"\n"
                "- ƒê·∫∑t t·∫•t c·∫£ c√°c gi√° tr·ªã c√≤n l·∫°i nh∆∞ \"percent_new\", \"price_low\", \"category\"‚Ä¶ th√†nh null ho·∫∑c 0.\n"
                "- C·∫£nh b√°o r√µ r√†ng trong tr∆∞·ªùng \"description\".\n"
                "- Ch·ªâ r√µ ·∫£nh n√†o b·ªã m·ªù b·∫±ng tr∆∞·ªùng \"image_indexes\".\n"
                "N·∫øu ph√°t hi·ªán nhi·ªÅu v·∫≠t th·ªÉ, h√£y tr·∫£ v·ªÅ JSON nh∆∞ sau:\n"
                "{\n"
                "  \"error\": \"Ph√°t hi·ªán nhi·ªÅu v·∫≠t th·ªÉ kh√°c nhau trong h√¨nh. Vui l√≤ng ch·ª•p m·ªói v·∫≠t th·ªÉ m·ªôt c√°ch ri√™ng bi·ªát v√† r√µ r√†ng.\"\n"
                "}\n"
                "Tr·∫£ k·∫øt qu·∫£ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON nh∆∞ sau (n·∫øu ch·ªâ c√≥ m·ªôt v·∫≠t th·ªÉ):\n"
                "[{\n"
                "  \"name\": \"\",\n"
                "  \"description\": \"\",\n"
                "  \"condition\": \"\",\n"
                "  \"damages\": \"\",\n"
                "  \"damages_percent\": 0,\n"
                "  \"percent_new\": 0,\n"
                "  \"price_low\": 0,\n"
                "  \"price_high\": 0,\n"
                "  \"issues\": [],\n"
                "  \"category\": {\n"
                "       \"level_1\": {\"id\": \"level_1_id\", \"name\": \"\"},\n"
                "       \"level_2\": {\"id\": \"level_2_id\", \"name\": \"\"},\n"
                "       \"level_3\": {\"id\": \"level_3_id\", \"name\": \"\"},\n"
                "       \"level_4\": {\"id\": \"level_4_id\", \"name\": \"\"},\n"
                "       \"level_5\": {\"id\": \"level_5_id\", \"name\": \"\"}\n"
                "   },\n"
                "  \"image_indexes\": [0, 1]\n"
                "}]\n"
            )
        }
    ]

if __name__ == "__main__":
    print("\n=== B·∫Øt ƒë·∫ßu ph√¢n t√≠ch t·ª´ AI ===\n")
    result = call_with_retry(base64_images)
    print("\nüü¢ K·∫øt qu·∫£ ph√¢n t√≠ch:\n", result)
    print("\n=== K·∫øt th√∫c ===")